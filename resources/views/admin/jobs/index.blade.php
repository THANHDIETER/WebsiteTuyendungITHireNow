@extends('admin.layouts.default')

@section('content')
    <div class="container-fluid py-4 mb-2">
        <h2 class="h4 mb-4">Tin tuy·ªÉn d·ª•ng ch·ªù duy·ªát</h2>

        {{-- Filter --}}
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <form method="GET" class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label fw-semibold">T√¨m theo ID</label>
                        <input type="text" name="search" value="{{ request('search') }}" class="form-control" placeholder="Nh·∫≠p ID tin tuy·ªÉn d·ª•ng">
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-semibold">Danh m·ª•c</label>
                        <select name="category" class="form-select">
                            <option value="">T·∫•t c·∫£ danh m·ª•c</option>
                            @foreach ($categories as $cat)
                                <option value="{{ $cat->id }}" {{ request('category') == $cat->id ? 'selected' : '' }}>
                                    {{ $cat->name}}
                                </option>
                            @endforeach
                        </select>
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button class="btn btn-primary w-100">
                            <i class="bi bi-filter me-1"></i> L·ªçc k·∫øt qu·∫£
                        </button>
                    </div>
                </form>
            </div>
        </div>

        {{-- Table --}}
        <div class="card shadow-sm">
            <div class="table-responsive">
                <table class="table table-hover table-bordered align-middle text-center mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Ti√™u ƒë·ªÅ</th>
                            <th>C√¥ng ty</th>
                            <th>Danh m·ª•c</th>
                            <th>H√¨nh th·ª©c</th>
                            <th>M·ª©c l∆∞∆°ng</th>
                            <th>H·∫°n n·ªôp</th>
                            <th>N·ªïi b·∫≠t</th>
                            <th>Tr·∫°ng th√°i</th>
                            <th>Ng√†y t·∫°o</th>
                            <th>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                       @forelse ($jobs as $job)
                            <tr data-id="{{ $job->id }}">
                                <td>{{ $job->id }}</td>
                                <td>{{ Str::limit($job->title, 10) }}</td>
                                <td>{{ Str::limit($job->company->name ?? '-', 10) }}</td>
                                <td>
                                    {{ $job->categories->isNotEmpty()
                                        ? Str::limit($job->categories->pluck('name')->join(', '), 10)
                                        : '-' }}
                                </td>
                                <td>{{ $job->jobType?->name ?? '-' }}</td>
                                <td>{{ $job->salary_range }}</td>
                                <td>{{ optional($job->deadline)?->format('d/m/Y') ?? '-' }}</td>
                                <td>{!! $job->featured_badge !!}</td>
                                <td class="job-status">{!! $job->status_badge !!}</td>
                                <td>{{ $job->created_at->format('d/m/Y') }}</td>
                                <td class="text-center align-middle action-cell">
                                    <div class="d-flex justify-content-center align-items-center gap-1 flex-nowrap">
                                        {{-- Xem chi ti·∫øt --}}
                                        <button type="button" class="btn btn-secondary btn-sm btn-view" data-id="{{ $job->id }}" title="Xem chi ti·∫øt">
                                            <i class="bi bi-eye-fill"></i>
                                        </button>

                                        {{-- Duy·ªát / T·ª´ ch·ªëi --}}
                                        @if ($job->status === 'pending')
                                            <button type="button" class="btn btn-success btn-sm btn-approve" data-id="{{ $job->id }}" title="Duy·ªát">
                                                <i class="bi bi-check-circle-fill"></i>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm btn-reject" data-id="{{ $job->id }}" title="T·ª´ ch·ªëi">
                                                <i class="bi bi-x-circle-fill"></i>
                                            </button>
                                        @endif

                                        {{-- Xo√° n·∫øu ch∆∞a ƒë√≥ng ho·∫∑c ƒë√£ ƒëƒÉng --}}
                                        @if (!in_array($job->status, ['closed', 'published']))
                                            <form action="{{ route('admin.jobs.destroy', $job) }}" method="POST" class="d-inline delete-form" data-id="{{ $job->id }}">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="btn btn-dark btn-sm btn-delete" title="Xo√°">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            </form>
                                        @endif

                                        {{-- Kh√¥i ph·ª•c n·∫øu v·ª´a c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y --}}
                                        @if (in_array($job->status, ['published', 'closed']) && $job->updated_at->diffInMinutes(now()) <= 5)
                                            <button type="button" class="btn btn-warning btn-sm revert-job" data-url="{{ route('admin.jobs.revert', $job->id) }}" title="Kh√¥i ph·ª•c v·ªÅ ch·ªù duy·ªát">
                                                <i class="bi bi-arrow-counterclockwise"></i>
                                            </button>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                       @empty
                            <tr>
                                <td colspan="11" class="text-muted py-4">Kh√¥ng c√≥ tin tuy·ªÉn d·ª•ng n√†o ph√π h·ª£p.</td>
                            </tr>
                       @endforelse
                    </tbody>
                </table>
            </div>
        </div>



        {{-- Pagination --}}
        @if ($jobs->hasPages())
            <div class="row mt-4 align-items-center">
                <div class="col-md-6 small text-muted">
                    Hi·ªÉn th·ªã <strong>{{ $jobs->firstItem() }}</strong> ƒë·∫øn <strong>{{ $jobs->lastItem() }}</strong> trong t·ªïng
                    s·ªë <strong>{{ $jobs->total() }}</strong> k·∫øt qu·∫£
                </div>
                <div class="col-md-6">
                    <nav class="d-flex justify-content-md-end justify-content-center">
                        {{ $jobs->withQueryString()->onEachSide(1)->links('pagination::bootstrap-5') }}
                    </nav>
                </div>
            </div>
        @endif
    </div>

    {{-- Modal chi ti·∫øt --}}
    <div class="modal fade" id="jobDetailModal" tabindex="-1" aria-labelledby="jobDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi ti·∫øt tin tuy·ªÉn d·ª•ng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
                </div>
                <div class="modal-body" id="jobDetailContent">
                    <p class="text-center text-muted">ƒêang t·∫£i...</p>
                </div>
            </div>
        </div>
    </div>
@endsection

@push('scripts')
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const csrfToken = '{{ csrf_token() }}';
            let isFetchingJobDetail = false;

            // ‚úÖ H√†m d·ª±ng l·∫°i n√∫t theo statusHtml
            function renderActionButtons(jobId, statusHtml) {
                const isPublished = statusHtml.includes('ƒê√£ ƒëƒÉng');
                const isRejected = statusHtml.includes('T·ª´ ch·ªëi');
                const isPending = statusHtml.includes('Ch·ªù duy·ªát') || (!isPublished && !isRejected);

                let html = `<div class="d-flex justify-content-center align-items-center gap-1 flex-nowrap">`;

                // üëÅ Xem chi ti·∫øt: lu√¥n c√≥
                html += `
                                        <button class="btn btn-secondary btn-sm btn-view" data-id="${jobId}" title="Xem chi ti·∫øt">
                                            <i class="bi bi-eye-fill"></i>
                                        </button>
                                    `;

                if (isPublished) {
                    const revertUrl = `/admin/jobs/${jobId}/revert`;
                    html += `
                                            <button type="button" class="btn btn-warning btn-sm revert-job"
                                                data-url="${revertUrl}" title="Kh√¥i ph·ª•c v·ªÅ ch·ªù duy·ªát">
                                                <i class="bi bi-arrow-counterclockwise"></i>
                                            </button>
                                        `;
                }

                if (isRejected) {
                    const deleteRoute = `{{ route('admin.jobs.destroy', ':id') }}`.replace(':id', jobId);
                    html += `
                                            <form action="${deleteRoute}" method="POST" class="d-inline delete-form" data-id="${jobId}">
                                                <input type="hidden" name="_token" value="${csrfToken}">
                                                <input type="hidden" name="_method" value="DELETE">
                                                <button type="submit" class="btn btn-dark btn-sm btn-delete" title="Xo√°">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            </form>
                                        `;
                }

                if (isPending) {
                    // ‚úÖ Hi·ªán ƒë·∫ßy ƒë·ªß c·∫£ 3 n√∫t khi pending
                    html += `
                                            <button type="button" class="btn btn-success btn-sm btn-approve"
                                                data-id="${jobId}" title="Duy·ªát">
                                                <i class="bi bi-check-circle-fill"></i>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm btn-reject"
                                                data-id="${jobId}" title="T·ª´ ch·ªëi">
                                                <i class="bi bi-x-circle-fill"></i>
                                            </button>
                                        `;

                    const deleteRoute = `{{ route('admin.jobs.destroy', ':id') }}`.replace(':id', jobId);
                    html += `
                                            <form action="${deleteRoute}" method="POST" class="d-inline delete-form" data-id="${jobId}">
                                                <input type="hidden" name="_token" value="${csrfToken}">
                                                <input type="hidden" name="_method" value="DELETE">
                                                <button type="submit" class="btn btn-dark btn-sm btn-delete" title="Xo√°">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            </form>
                                        `;
                }

                html += `</div>`;
                return html;
            }

            // üëÅ Xem chi ti·∫øt
            document.addEventListener('click', function (e) {
                const btn = e.target.closest('.btn-view');
                if (!btn || isFetchingJobDetail) return;

                isFetchingJobDetail = true;

                const jobId = btn.dataset.id;
                const modalEl = document.getElementById('jobDetailModal');
                const contentEl = document.getElementById('jobDetailContent');
                const modal = bootstrap.Modal.getOrCreateInstance(modalEl);

                contentEl.innerHTML = '<p class="text-center text-muted">ƒêang t·∫£i...</p>';

                fetch(`/admin/jobs/${jobId}`)
                    .then(async (response) => {
                        if (!response.ok) {
                            const contentType = response.headers.get("Content-Type") || "";
                            if (contentType.includes("application/json")) {
                                const json = await response.json();
                                throw new Error(json.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
                            } else {
                                throw new Error('L·ªói t·∫£i chi ti·∫øt');
                            }
                        }
                        return response.text();
                    })
                    .then(html => {
                        contentEl.innerHTML = html;
                        setTimeout(() => {
                            modalEl.removeAttribute('inert');
                            modal.show();
                            isFetchingJobDetail = false;
                        }, 50);
                    })
                    .catch((err) => {
                        const errorMessage = err.message?.trim();

                        showAlertModal({
                            title: 'L·ªói',
                            message: errorMessage || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt.'
                        });

                        if (errorMessage === 'Tin tuy·ªÉn d·ª•ng kh√¥ng t·ªìn t·∫°i.') {
                            const row = document.querySelector(`tr[data-id="${jobId}"]`);
                            if (row) row.remove();
                        }

                        isFetchingJobDetail = false;
                    });

            });

            // üóë Xo√° (kh√¥ng reload)
            document.addEventListener('click', function (e) {
    const btn = e.target.closest('.btn-delete');
    if (!btn) return;

    e.preventDefault();
    const form = btn.closest('form');
    const row = btn.closest('tr'); // ‚úÖ Th√™m d√≤ng n√†y
    const id = form.dataset.id;
    const action = form.getAttribute('action');

    showAlertModal({
        title: `Xo√° tin tuy·ªÉn d·ª•ng #${id}?`,
        message: 'H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.',
        onConfirm: () => {
            fetch(action, {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': csrfToken,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ _method: 'DELETE' })
            })
                .then(async (res) => {
                    if (res.status === 204) {
                        return { success: true, message: 'Tin ƒë√£ ƒë∆∞·ª£c xo√°.' };
                    }
                    const data = await res.json();
                    return data;
                })
                .then(res => {
                    showAlertModal({
                        type: 'alert',
                        title: res.success ? 'ƒê√£ xo√°' : 'L·ªói',
                        message: res.message || (res.success ? 'Tin ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng.' : 'Xo√° th·∫•t b·∫°i.')
                    });

                    if (res.success || res.message === 'Tin tuy·ªÉn d·ª•ng kh√¥ng t·ªìn t·∫°i.') {
                        if (row) row.remove();
                    }
                })
                .catch((err) => {
                    console.error('Fetch error:', err); // ƒë·ªÉ debug
                    showAlertModal({
                        type: 'alert',
                        title: 'L·ªói',
                        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.'
                    });
                });
        }
    });
});



            // ‚úÖ Duy·ªát / T·ª´ ch·ªëi
            function handleAction(selector, action, fallbackStatusHtml) {
                document.addEventListener('click', function (e) {
                    const btn = e.target.closest(selector);
                    if (!btn) return;

                    const jobId = btn.dataset.id;

                    showAlertModal({
                        title: action === 'approve' ? 'Duy·ªát tin tuy·ªÉn d·ª•ng?' : 'T·ª´ ch·ªëi tin?',
                        message: action === 'approve'
                            ? 'Tin s·∫Ω ƒë∆∞·ª£c ƒëƒÉng c√¥ng khai.'
                            : 'Tin s·∫Ω b·ªã t·ª´ ch·ªëi v√† kh√¥ng hi·ªÉn th·ªã.',
                        onConfirm: () => {
                            fetch(`/admin/jobs/${jobId}/${action}`, {
                                method: 'POST',
                                headers: {
                                    'X-CSRF-TOKEN': csrfToken,
                                    'Accept': 'application/json'
                                }
                            })
                                .then(res => res.json())
                                .then(res => {
                                    const row = document.querySelector(`tr[data-id="${jobId}"]`);
                                    if (!row || !res.status_html) return;

                                    row.querySelector('.job-status').innerHTML = res.status_html;
                                    row.querySelector('.action-cell').innerHTML = renderActionButtons(jobId, res.status_html);

                                    showAlertModal({
                                        type: 'alert',
                                        title: res.success ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i',
                                        message: res.message || 'C√≥ l·ªói x·∫£y ra.'
                                    });
                                })
                                .catch(() => {
                                    showAlertModal({
                                        type: 'alert',
                                        title: 'L·ªói m·∫°ng',
                                        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.'
                                    });
                                });
                        }
                    });
                });
            }

            handleAction('.btn-approve', 'approve', '<span class="badge bg-success">ƒê√£ ƒëƒÉng</span>');
            handleAction('.btn-reject', 'reject', '<span class="badge bg-danger">T·ª´ ch·ªëi</span>');

            // üîÅ Kh√¥i ph·ª•c v·ªÅ pending (kh√¥ng reload)
            $(document).on('click', '.revert-job', function () {
                const url = $(this).data('url');

                showAlertModal({
                    title: 'Kh√¥i ph·ª•c v·ªÅ tr·∫°ng th√°i ch·ªù duy·ªát?',
                    message: 'Tin s·∫Ω quay l·∫°i tr·∫°ng th√°i pending.',
                    onConfirm: () => {
                        $.ajax({
                            url: url,
                            method: 'POST',
                            data: { _token: csrfToken },
                            success: function (res) {
                                const jobId = url.split('/').slice(-2, -1)[0];
                                const row = document.querySelector(`tr[data-id="${jobId}"]`);
                                if (!row || !res.status_html) return;

                                row.querySelector('.job-status').innerHTML = res.status_html;
                                row.querySelector('.action-cell').innerHTML = renderActionButtons(jobId, res.status_html);

                                showAlertModal({
                                    type: 'alert',
                                    title: res.success ? 'Th√†nh c√¥ng' : 'L·ªói',
                                    message: res.message
                                });
                            },
                            error: function (xhr) {
                                let res;
                                try { res = xhr.responseJSON; } catch (_) { res = null; }

                                const jobId = url.split('/').slice(-2, -1)[0];
                                const row = document.querySelector(`tr[data-id="${jobId}"]`);

                                if (res?.status_html && row) {
                                    row.querySelector('.job-status').innerHTML = res.status_html;
                                    row.querySelector('.action-cell').innerHTML = renderActionButtons(jobId, res.status_html);
                                }

                                showAlertModal({
                                    type: 'alert',
                                    title: 'L·ªói',
                                    message: res?.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.'
                                });
                            }
                        });
                    }
                });
            });
        });
    </script>
@endpush